package main

/*
State Transition Diagram
|-----|---|---|---|
|     |opA|opB|opC|
|=====|===|===|===|
|  A  | B | C | D |
|  B  | C | B | D |
|  C  | D | B | - |
|  D  | A | B | C |
|-----|---|---|---|

C.opC is invalid operation

상태 패턴

객체의 상태에 따른 구현을 클라이언트가 아닌, 상태머신으로 분리 시키는 디자인 패턴이다. 상태를 바꾸는 것 만으로 객체의 내부 로직을 바꾸는 듯한 구현을 할 수 있다.
특정 객체가 상태별로 여러가지 기능을 수행할때, 이 기능을 하나의 객체 또는 클라이언트에 모두 구현한다면 분기문도 늘어나고 로직 복잡도도 증가한다. 만약 상태를
추가한다면 모든 상태별로 분기문을 추가해야하는 일이 생길 수 도 있다. 하지만 상태 패턴을 구현하면 각 상태를 객체화 하여 해당 상태의 동작이나 천이를 해당 상태가
모두 책임지도록 구현할 수 있다. 이 경우 클라이언트가 각 상태 객체를 생성하기는 해도 상태에 관한 행위를 구현할 필요가 없어지며, 새로운 상태를 추가하거나
상태의 동작을 변경하는 경우 영향 받는 상태만 수정을 하면 된다.
*/

func main() {
	stateMachine := NewStateMachine()
	for {
		stateMachine.Operate()
	}
}
